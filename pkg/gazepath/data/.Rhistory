count <- 1
output <- numeric()
for(fix in seq(2, 4, .2)){
for(sac in seq(1, 4, .33)){
data <- cbind(500,550)
type <- 'f'
for(i in 1:250){
data <- gen.fixation(data, dur.fix = fix)
type <- c(type, rep('f', dim(data)[1] - length(type)))
data <- gen.saccade(data, dur.sac = sac)
type <- c(type, rep('s', dim(data)[1] - length(type)))
}
row <- numeric()
row <- c(row, mean(rle(type)$lengths[rle(type)$values == 'f']) * 2)
row <- c(row, mean(rle(type)$lengths[rle(type)$values == 's']) * 2)
dat <- cbind(data, rnorm(length(data[,1]), 900, 2), rep(1, length(data[,1])))
for(method in c('Tobii', 'Mould', 'Fixed')){
check <- GazePath(as.data.frame(dat), 1, 2, 3, 4, 786, 200, 1024, 272, screen.res.x = 1024, screen.res.y = 786, method = method)
row <- c(row, sum(type == unlist(check[[1]]), na.rm = T) / length(type))
row <- c(row, mean(rle(check[[1]])$lengths[which(rle(check[[1]])$values == 'f')], na.rm = T) * 2)
row <- c(row, sum(rle(check[[1]])$values == 'f', na.rm = T))
row <- c(row, check[[2]])
row <- c(row, check[[3]])
}
output <- rbind(output, row)
print(count)
count <- count + 1
}
}
method <- rep(c('TRUE', 'Tobii', 'Mould', 'Fixed'), each = 3)
plot_output <- cbind(rep(1:10, each = 11), output[,c(1:5,8:10,13:15)])
write.table(plot_output, 'MOULDvsTOBII_thres_mouldadj.txt')
library(plotrix)
layout(matrix(1:3,1,3))
plotCI(by(plot_output[,2], plot_output[,1], mean),
uiw = by(plot_output[,2], plot_output[,1], sd)/sqrt(11) * 2,
bty = 'n', xlab = 'True mean fixation duration', ylab = 'Mean fixation duration',
xaxt = 'n', ylim = c(100, 500))
axis(1, round(by(plot_output[,2], plot_output[,1], mean)), at = 1:10)
legend(7, 164, method[1], pch = 1, col = 1, bty = 'n')
for(i in seq(5,11,3)){
par(new = T)
plotCI(by(plot_output[,i], plot_output[,1], mean),
uiw = by(plot_output[,i], plot_output[,1], sd)/sqrt(11) * 2,
bty = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt = 'n',
ylim = c(100, 500), pch = i - 3, col = i - 3)
legend(7, 150 + i * 8, method[i], col = i - 3, pch = i - 3, bty = 'n')
}
plot(1:10, rep(10,10), bty = 'n', xlab = 'True mean fixation duration', ylab = 'Proportion of correctly classified samples',
ylim = c(.5, 1), xaxt = 'n')
axis(1, round(by(plot_output[,2], plot_output[,1], mean)), at = 1:10)
for(i in seq(4,10,3)){
par(new = T)
plotCI(by(plot_output[,i], plot_output[,1], mean),
uiw = by(plot_output[,i], plot_output[,1], sd)/sqrt(11) * 2,
bty = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt = 'n',
ylim = c(.5, 1), pch = i - 2, col = i - 2)
legend(7, .5 + i / 40, method[i], col = i - 2, pch = i - 2, bty = 'n')
}
plot(1:10, rep(1000,10), bty = 'n', xlab = 'True mean fixation duration', ylab = 'Number of classified fixations',
ylim = c(100, 300), xaxt = 'n')
axis(1, round(by(plot_output[,2], plot_output[,1], mean)), at = 1:10)
segments(0, 250, 10, 250, col = 2)
legend(7, 115, 'True',
lty = 1, col = 2, bty = 'n')
for(i in seq(6,12,3)){
par(new = T)
plotCI(by(plot_output[,i], plot_output[,1], mean),
uiw = by(plot_output[,i], plot_output[,1], sd)/sqrt(11) * 2,
bty = 'n', xlab = '', ylab = '', xaxt = 'n', yaxt = 'n',
ylim = c(100, 300), pch = i - 4, col = i - 4)
legend(7, 100 + i * 6, method[i], col = i - 4, pch = i - 4, bty = 'n')
}
## Classify all samples
fixationANDsaccade <- function(speed, thres_vel, thres_dur, Hz = 500){
rle <- rle(ifelse(speed > thres_vel, 's', 'f'))
classify <- numeric()
for(i in 1:length(rle$values)){
if(is.na(rle$values[i])){
classify <- c(classify, rep(NA, rle$lengths[i]))
} else{
if(rle$values[i] == 'f' & rle$lengths[i] >= thres_dur){
classify <- c(classify, rep('f', rle$lengths[i]))
}
if(rle$values[i] == 'f' & rle$lengths[i] < thres_dur){
classify <- c(classify, rep('u', rle$lengths[i]))
}
## Set a minimum duartions for saccade of 10 ms
if(rle$values[i] == 's' & rle$lengths[i] < 10 * (Hz / 1000)){
classify <- c(classify, rep('u', rle$lengths[i]))
}
if(rle$values[i] == 's' & rle$lengths[i] >= 10 * (Hz / 1000)){
classify <- c(classify, rep('s', rle$lengths[i]))
}
}
}
return(classify)
}
plot(s)
data <- cbind(500,550)
type <- 'f'
for(i in 1:250){
data <- gen.fixation(data, dur.fix = fix)
type <- c(type, rep('f', dim(data)[1] - length(type)))
data <- gen.saccade(data, dur.sac = sac)
type <- c(type, rep('s', dim(data)[1] - length(type)))
}
data <- gen.fixation(cbind(500,500))
s <- Speed_Deg(data[,1], data[,2], rnorm(length(data[,1]), 900, 3), 200, 270, 786, 1024, Hz = 500)
plot(s)
data <- cbind(500,550)
type <- 'f'
for(i in 1:250){
data <- gen.fixation(data, dur.fix = fix)
type <- c(type, rep('f', dim(data)[1] - length(type)))
data <- gen.saccade(data, dur.sac = sac)
type <- c(type, rep('s', dim(data)[1] - length(type)))
}
s <- Speed_Deg(data[,1], data[,2], rnorm(length(data[,1]), 900, 3), 200, 270, 786, 1024, Hz = 500)
plot(s)
Mould(s)
thres_vel <- Mould(s)
speed <- s
thres_dur
rle <- rle(ifelse(speed > thres_vel, 's', 'f'))
classify <- numeric()
for(i in 1:length(rle$values)){
if(is.na(rle$values[i])){
classify <- c(classify, rep(NA, rle$lengths[i]))
} else{
if(rle$values[i] == 'f' & rle$lengths[i] >= thres_dur){
classify <- c(classify, rep('f', rle$lengths[i]))
}
if(rle$values[i] == 'f' & rle$lengths[i] < thres_dur){
classify <- c(classify, rep('u', rle$lengths[i]))
}
## Set a minimum duartions for saccade of 10 ms
if(rle$values[i] == 's' & rle$lengths[i] < 10 * (Hz / 1000)){
classify <- c(classify, rep('u', rle$lengths[i]))
}
if(rle$values[i] == 's' & rle$lengths[i] >= 10 * (Hz / 1000)){
classify <- c(classify, rep('s', rle$lengths[i]))
}
}
}
Hz <- 500
rle <- rle(ifelse(speed > thres_vel, 's', 'f'))
classify <- numeric()
for(i in 1:length(rle$values)){
if(is.na(rle$values[i])){
classify <- c(classify, rep(NA, rle$lengths[i]))
} else{
if(rle$values[i] == 'f' & rle$lengths[i] >= thres_dur){
classify <- c(classify, rep('f', rle$lengths[i]))
}
if(rle$values[i] == 'f' & rle$lengths[i] < thres_dur){
classify <- c(classify, rep('u', rle$lengths[i]))
}
## Set a minimum duartions for saccade of 10 ms
if(rle$values[i] == 's' & rle$lengths[i] < 10 * (Hz / 1000)){
classify <- c(classify, rep('u', rle$lengths[i]))
}
if(rle$values[i] == 's' & rle$lengths[i] >= 10 * (Hz / 1000)){
classify <- c(classify, rep('s', rle$lengths[i]))
}
}
}
rle(classify)
rle(classify)$values
rle(classify)$values[rle(classify)$values == 'u']
rle(classify)$lengths[rle(classify)$values == 'u']
rle(classify)
rle(classify)$values
rle(classify)$values[rle(classify)$values == 'u']
which(rle(classify)$values == 'u')
rle(classify)$values[which(rle(classify)$values == 'u') - 1]
rle(classify)$values[which(rle(classify)$values == 'u') + 1]
6.8 ^2
citation()
citation('lavaan')
IMET <- read.table('~/Downloads/2014_03_04_trt/data/IMET.txt')
AMET <- read.table('~/Downloads/2014_03_04_trt/data/AMET.txt')
## Load age
logI <- read.table("~/Downloads/2014_03_04_trt/log.txt", sep=',', header=T, na.strings = ".", comment.char = "")
logI <- logI[-c(10, 25, 38),]
Age <- logI[,5]
## Age of adults
logA <- read.table("~/Downloads/2014_03_04_trt/logadults.csv",sep=',',header=T,na.strings = ".",comment.char = "")
logA <- logA[-c(26, 46),]
## Screen characteristics
screen <- read.table('~/Downloads/2014_03_04_trt/screen.txt', header = T)
## Two measures of noise (variance in POG, measured with Tobii)
## and mean duration segments
POG <- IMET[,21]
MSL <- read.table('~/Downloads/2014_03_04_trt/data/MSL.txt')[,1]
POGA <- AMET[,21]
MSLA <- read.table('~/Downloads/2014_03_04_trt/data/MSLA.txt')[,1]
mean(AMET[,16])
mean(AMET[,17])
mean(AMET[,18])
mean(AMET[,1])
mean(AMET[,2])
mean(AMET[,3])
mean(AMET[,6])
mean(AMET[,7])
mean(AMET[,8])
mean(AMET[,9])
mean(IMET[,9])
mean(IMET[,8])
mean(IMET[,7])
dim(IMET)
plot(IMET[,7], IMET[,16])
plot(Age, IMET[,7])
plot(Age, IMET[,8])
plot(IMET[,17], IMET[,8])
plot(IMET[,17], IMET[,18])
plot(IMET[,17], IMET[,16])
plot(IMET[,18], IMET[,16])
plot(IMET[,8], IMET[,16])
plot(IMET[,7], IMET[,16])
cor.test(IMET[,7], IMET[,16])
mean(IMET[,7])
mean(AMET[,7])
mean(IMET[,8])
mean(AMET[,8])
mean(AMET[,16])
mean(AMET[,17])
mean(AMET[,18])
plot(POGA, AMET[,7])
plot(POGA, AMET[,8])
cor.test(POGA, AMET[,8])
cor.test(POGA, AMET[,7])
plot(POGA, AMET[,18])
cor.test(POGA, AMET[,18])
cor.test(POGA, AMET[,17])
cor.test(POGA, AMET[,16])
cor.test(POGM, AMET[,16])
cor.test(AMET[,21], AMET[,16])
cor.test(AMET[,19], AMET[,16])
mean(AMET[,19])
mean(AMET[,20])
mean(AMET[,21])
plot(MSLA, AMET[,18])
plot(MSLA, AMET[,17])
plot(MSLA, AMET[,16])
library(corpcor)
cor2pcor(cor(cbind(Age, IMET[,16], POG, MSL)))
cor(Age, IMET[,16])
cor(Age, IMET[,17])
library(corpcor)
cor2pcor(cor(cbind(Age, IMET[,17], POG, MSL)))
cor(Age, IMET[,18])
library(corpcor)
cor2pcor(cor(cbind(Age, IMET[,18], POG, MSL)))
library(biOps)
library(jpeg)
install.packages('XML')
## XML try
library(XML)
library(jpeg)
XML <- xmlTreeParse('http://people.csail.mit.edu/brussell/research/LabelMe/Annotations/barcelona_static_street/p1010573.xml')
XML <- xmlRoot(XML)
indexXML <- function(XML, name){
return(which(sapply(1:xmlSize(XML), function(i) xmlName(XML[[i]])) == name))
}
x <- y <- list()
object <- indexXML(XML, 'object')
for(i in object){
j <- indexXML(XML[[i]], 'polygon')
pt <- indexXML(XML[[i]][[j]], 'pt')
x[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[1]])))
y[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[2]])))
}
img <- jpeg('http://people.csail.mit.edu/brussell/research/LabelMe/Images/barcelona_static_street/p1010572.jpg')
plot(img)
dim(img)
img <- readJpeg('http://people.csail.mit.edu/brussell/research/LabelMe/Images/barcelona_static_street/p1010572.jpg')
dim(img)
getwd()
x <- readJpeg('test.jpg')
plot(x)
plot(1)
plot(1)
library(biOps)
library(jpeg)
x <- readJpeg('test.jpg')
plot(x)
rect(200, 400, 1000, 1000)
library(XML)
XML <- xmlTreeParse('http://people.csail.mit.edu/brussell/research/LabelMe/Annotations/barcelona_static_street/p1010572.xml')
XML <- xmlRoot(XML)
indexXML <- function(XML, name){
return(which(sapply(1:xmlSize(XML), function(i) xmlName(XML[[i]])) == name))
}
x <- y <- list()
object <- indexXML(XML, 'object')
for(i in object){
j <- indexXML(XML[[i]], 'polygon')
pt <- indexXML(XML[[i]][[j]], 'pt')
x[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[1]])))
y[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[2]])))
}
x[[1]]
x[[7]]
y[[7]]
img <- imgRGB2Grey(img)
dim(img)
img
plot(img)
x <- readJpeg('test.jpg')
dim(x)
plot(x)
for(i in object){
rect(min(x[[i]]), max(y[[i]]), max(x[[i]]), min(y[[i]]), lwd = 3, col = i)
}
point(10,10, lwd = 3, col = 2)
points(10,10, lwd = 3, col = 2)
points(100,100, lwd = 3, col = 2)
rect(100, 200, 1500, 1300, col = 2, lwd = 5)
?rect
rect(100, 200, 1500, 1300, border = 2, lwd = 5)
plot(x)
object
for(i in object){
rect(min(x[[i]]), max(y[[i]]), max(x[[i]]), min(y[[i]]), lwd = 3, border = i)
}
plot(x)
for(i in object){
rect(min(x[[i]]), min(y[[i]]), max(x[[i]]), max(y[[i]]), lwd = 3, border = i)
}
plot(1)
plot(x)
i
rect(min(x[[i]]), min(y[[i]]), max(x[[i]]), max(y[[i]]), lwd = 3, border = i)
min(x[[50]])
max(x[[50]])
x[[50]]
x[[5]]
x[[6]]
x[[8]]
x <- y <- list()
object <- indexXML(XML, 'object')
for(i in object){
j <- indexXML(XML[[i]], 'polygon')
pt <- indexXML(XML[[i]][[j]], 'pt')
x[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[k]][[j]][[k]][[1]])))
y[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[k]][[j]][[k]][[2]])))
}
x <- y <- list()
object <- indexXML(XML, 'object')
for(i in object){
j <- indexXML(XML[[i]], 'polygon')
pt <- indexXML(XML[[i]][[j]], 'pt')
x[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[1]])))
y[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[2]])))
}
x[[5]]
x[[6]]
x[[8]]
img <- readJpeg('test.jpg')
plot(img)
for(i in object){
rect(min(x[[i]]), min(y[[i]]), max(x[[i]]), max(y[[i]]), lwd = 3, border = i)
}
XML[[5]][[5]]
XML[[5]][[6]]
XML[[6]][[5]]
XML[[6]][[1]]
XML[[5]][[1]]
XML[[7]][[1]]
XML[[8]][[1]]
XML[[9]][[1]]
XML[[10]][[1]]
XML[[11]][[1]]
XML[[12]][[1]]
plot(img)
x[[5]]
points(x[[5]], y[[5]], lwd = 3, col = 2)
points(x[[6]], y[[6]], lwd = 3, col = 3)
XML <- xmlTreeParse('http://people.csail.mit.edu/brussell/research/LabelMe/Annotations/static_palma_outdoor_august_2005_set4/img_2207.xml')
XML <- xmlRoot(XML)
x[[5]]
x[[6]]
x[[7]]
x[[8]]
x <- y <- list()
object <- indexXML(XML, 'object')
for(i in object){
j <- indexXML(XML[[i]], 'polygon')
pt <- indexXML(XML[[i]][[j]], 'pt')
x[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[1]])))
y[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[2]])))
}
x[[8]]
x[[6]]
x[[5]]
x[[4]]
x[[3]]
img <- readJpeg('img_2207.jpg')
object
plot(img)
for(i in object){
rect(min(x[[i]]), min(y[[i]]), max(x[[i]]), max(y[[i]]), lwd = 3, border = i)
}
dim(img)
points(x[[4]], y[[4]], lwd = 3, col = 2)
points(x[[4]], y[[4]], lwd = 3, col = 2, ylim = c(dim(img)[1], 0))
points(x[[5]], y[[5]], lwd = 3, col = 2, ylim = c(dim(img)[1], 0))
y[[5]]
points(x[[5]], 1944 - y[[5]], lwd = 3, col = 2, ylim = c(dim(img)[1], 0))
plot(img)
for(i in object){
rect(min(x[[i]]), max(dim(img)[1] - y[[i]]), max(x[[i]]), max(dim(img)[1] - y[[i]]), lwd = 3, border = i)
}
plot(img)
for(i in object){
rect(min(x[[i]]), min(dim(img)[1] - y[[i]]), max(x[[i]]), max(dim(img)[1] - y[[i]]), lwd = 3, border = i)
}
img <- readJpeg('test.jpg')
plot(img)
XML <- xmlTreeParse('http://people.csail.mit.edu/brussell/research/LabelMe/Annotations/barcelona_static_street/p1010572.xml')
XML <- xmlRoot(XML)
#which(sapply(1:xmlSize(XML), function(i) xmlName(XML[[i]])) == 'object')
indexXML <- function(XML, name){
return(which(sapply(1:xmlSize(XML), function(i) xmlName(XML[[i]])) == name))
}
x <- y <- list()
object <- indexXML(XML, 'object')
for(i in object){
j <- indexXML(XML[[i]], 'polygon')
pt <- indexXML(XML[[i]][[j]], 'pt')
x[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[1]])))
y[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[2]])))
}
object
for(i in object){
rect(min(x[[i]]), min(dim(img)[1] - y[[i]]), max(x[[i]]), max(dim(img)[1] - y[[i]]), lwd = 3, border = i)
}
plot(img)
points(x[[5]], y[[5]], col = 2, lwd = 2)
points(x[[5]], dim(img)[1] - y[[5]], col = 2, lwd = 2)
library(biOps)
library(jpeg)
library(XML)
XML <- xmlTreeParse('http://people.csail.mit.edu/brussell/research/LabelMe/Annotations/barcelona_static_street/p1010572.xml')
XML <- xmlRoot(XML)
indexXML <- function(XML, name){
return(which(sapply(1:xmlSize(XML), function(i) xmlName(XML[[i]])) == name))
}
x <- y <- list()
object <- indexXML(XML, 'object')
for(i in object){
j <- indexXML(XML[[i]], 'polygon')
pt <- indexXML(XML[[i]][[j]], 'pt')
x[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[1]])))
y[[i]] <- as.numeric(sapply(pt, function(k) xmlValue(XML[[i]][[j]][[k]][[2]])))
}
img <- readJpeg('http://people.csail.mit.edu/brussell/research/LabelMe/Images/barcelona_static_street/p1010572.jpg')
img <- readJpeg('test.jpg')
plot(img)
for(i in object){
rect(min(x[[i]]), min(dim(img)[1] - y[[i]]), max(x[[i]]), max(dim(img)[1] - y[[i]]), lwd = 3, border = i)
}
display(img)
plot(img)
?polygon
polygon(x[[5]], y[[5]])
polygon(x[[5]], y[[5]])
points(x[[5]], y[[5]])
polygon(x[[5]], y[[5]], col = 2, lwd = 4)
points(x[[5]], y[[5]], col = 2, lwd = 4)
plot(img)
polygon(x[[5]], y[[5]], border = 2, lwd = 4)
for(i in object){
polygon(x[[i]], y[[i]], border = i, lwd = 4)
}
plot(img)
for(i in object){
polygon(x[[i]], dim(img)[1] - y[[i]], border = i, lwd = 4)
}
plot(1, xlim = c(0, dim(img)[2]), ylim = c(0, dim(img)[1]))
for(i in object){
polygon(x[[i]], dim(img)[1] - y[[i]], border = i, lwd = 4)
}
rm(list = ls())
library(gazepattern)
?GazePath
GazePath
library(Gaze)
GazePath
rm(list = ls())
library(gazepath)
?gazepath
?GazePath
source('~\gazepattens\pkg\data\dat.Rdata')
source('~/gazepattens/pkg/data/dat.Rdata')
source('~/gazepattens/pkg/gazepath/data/dat.Rdata')
source('~/gazepattens/pkg/gazepath/data')
setwd('~/gazepattens/pkg/gazepath/data')
setwd('~/gazepattens')
setwd('~\gazepattens')
source('~/gazepatterns/pkg/gazepath/data/dat.Rdata')
setwd('~/gazepatterns/pkg/gazepath/data')
list.files()
load("/home/daan/gazepatterns/pkg/gazepath/data/dat.Rdata")
head(data)
?data()
data(data)
?with
rm(list = ls())
library(gazepath)
data(data)
